{
  "version": 3,
  "sources": ["../../src/pillButtonCheckboxes/colors.ts", "../../src/pillButtonCheckboxes/softwarePillButton.ts"],
  "sourcesContent": ["export const colors = {\n\tlightHoverColor: \"#ffc83f\",\n\tdarkHoverColor: \"#ffc83f\",\n\tlightSelectedHoverColor: \"#FFC83F\",\n\tdarkSelectedHoverColor: \"#FFC83F\",\n\tlightBackgroundColor: 'transparent',\n\tdarkBackgroundColor: 'transparent',\n\tlightSelectedBackgroundColor: '#1b1b1b',\n\tdarkSelectedBackgroundColor: \"#FFB90A\",\n\tlightTextColor: \"#1b1b1b\",\n\tlightSelectedTextColor: \"#FFFFFF\",\n\tdarkTextColor: \"#FFFFFF\",\n\tdarkSelectedTextColor: \"#0A0A0A\",\n}", "import { colors } from './colors'\n\nconst softwareCheckbox: HTMLInputElement = document.getElementById('checkbox-pill-software') as HTMLInputElement\nconst softwarePill: HTMLElement = document.getElementById('pill-checkbox-software')\nconst softwareButtonHover: HTMLElement = document.getElementById('button-hover-software')\nconst softwarePillLabel: HTMLElement = document.getElementById('pill-list-label-software')\n\nfunction isLightThemed() {\n\treturn softwarePill.className.includes('__light')\n}\n\nconst softwareThemeObserver = new MutationObserver((mutationList: unknown, _observer) => {\n\tif (mutationList[0].target.className.includes('__light')) {\n\t\tif (softwareCheckbox.checked) {\n\t\t\tsoftwarePill.style.backgroundColor = colors.lightSelectedBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t\tsoftwarePillLabel.style.color = colors.lightSelectedTextColor\n\t\t} else {\n\t\t\tsoftwarePillLabel.style.color = colors.lightTextColor\n\t\t\tsoftwarePill.style.backgroundColor = colors.lightBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t}\n\t} else {\n\t\tif (softwareCheckbox.checked) {\n\t\t\tsoftwarePill.style.backgroundColor = colors.darkSelectedBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t\tsoftwarePillLabel.style.color = colors.darkSelectedTextColor\n\t\t} else {\n\t\t\tsoftwarePill.style.backgroundColor = colors.darkBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t\tsoftwarePillLabel.style.color = colors.darkTextColor\n\t\t}\n\t}\n})\n\nsoftwareThemeObserver.observe(softwarePill, { attributes: true })\n\nsoftwarePill.addEventListener('click', function () {\n\tsoftwareCheckbox.checked = !softwareCheckbox.checked\n\tif (softwareCheckbox.checked) {\n\t\tif (isLightThemed()) {\n\t\t\tsoftwarePill.style.backgroundColor = colors.lightSelectedBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t\tsoftwarePillLabel.style.color = colors.lightSelectedTextColor\n\t\t} else {\n\t\t\tsoftwarePillLabel.style.color = colors.darkSelectedTextColor\n\t\t\tsoftwarePill.style.backgroundColor = colors.darkSelectedBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t}\n\t} else {\n\t\tif (isLightThemed()) {\n\t\t\tsoftwarePill.style.backgroundColor = colors.lightBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t\tsoftwarePillLabel.style.color = colors.lightTextColor\n\t\t} else {\n\t\t\tsoftwarePill.style.backgroundColor = colors.darkBackgroundColor\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t\tsoftwarePillLabel.style.color = colors.darkTextColor\n\t\t}\n\t}\n});\n\nsoftwarePill.addEventListener('mouseover', function () {\n\tif (softwareCheckbox.checked) {\n\t\tif (isLightThemed()) {\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t} else {\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t}\n\t} else {\n\t\tif (isLightThemed()) {\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t} else {\n\t\t\tsoftwareButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t}\n\t}\n})\n"],
  "mappings": "MAAO,IAAMA,EAAS,CACrB,gBAAiB,UACjB,eAAgB,UAChB,wBAAyB,UACzB,uBAAwB,UACxB,qBAAsB,cACtB,oBAAqB,cACrB,6BAA8B,UAC9B,4BAA6B,UAC7B,eAAgB,UAChB,uBAAwB,UACxB,cAAe,UACf,sBAAuB,SACxB,ECXA,IAAMC,EAAqC,SAAS,eAAe,wBAAwB,EACrFC,EAA4B,SAAS,eAAe,wBAAwB,EAC5EC,EAAmC,SAAS,eAAe,uBAAuB,EAClFC,EAAiC,SAAS,eAAe,0BAA0B,EAEzF,SAASC,GAAgB,CACxB,OAAOH,EAAa,UAAU,SAAS,SAAS,CACjD,CAEA,IAAMI,EAAwB,IAAI,iBAAiB,CAACC,EAAuBC,IAAc,CACpFD,EAAa,CAAC,EAAE,OAAO,UAAU,SAAS,SAAS,EAClDN,EAAiB,SACpBC,EAAa,MAAM,gBAAkBO,EAAO,6BAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,wBACnDL,EAAkB,MAAM,MAAQK,EAAO,yBAEvCL,EAAkB,MAAM,MAAQK,EAAO,eACvCP,EAAa,MAAM,gBAAkBO,EAAO,qBAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,iBAGhDR,EAAiB,SACpBC,EAAa,MAAM,gBAAkBO,EAAO,4BAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,uBACnDL,EAAkB,MAAM,MAAQK,EAAO,wBAEvCP,EAAa,MAAM,gBAAkBO,EAAO,oBAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,eACnDL,EAAkB,MAAM,MAAQK,EAAO,cAG1C,CAAC,EAEDH,EAAsB,QAAQJ,EAAc,CAAE,WAAY,EAAK,CAAC,EAEhEA,EAAa,iBAAiB,QAAS,UAAY,CAClDD,EAAiB,QAAU,CAACA,EAAiB,QACzCA,EAAiB,QAChBI,EAAc,GACjBH,EAAa,MAAM,gBAAkBO,EAAO,6BAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,wBACnDL,EAAkB,MAAM,MAAQK,EAAO,yBAEvCL,EAAkB,MAAM,MAAQK,EAAO,sBACvCP,EAAa,MAAM,gBAAkBO,EAAO,4BAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,wBAGhDJ,EAAc,GACjBH,EAAa,MAAM,gBAAkBO,EAAO,qBAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,gBACnDL,EAAkB,MAAM,MAAQK,EAAO,iBAEvCP,EAAa,MAAM,gBAAkBO,EAAO,oBAC5CN,EAAoB,MAAM,gBAAkBM,EAAO,eACnDL,EAAkB,MAAM,MAAQK,EAAO,cAG1C,CAAC,EAEDP,EAAa,iBAAiB,YAAa,UAAY,CAClDD,EAAiB,QAChBI,EAAc,EACjBF,EAAoB,MAAM,gBAAkBM,EAAO,wBAEnDN,EAAoB,MAAM,gBAAkBM,EAAO,uBAGhDJ,EAAc,EACjBF,EAAoB,MAAM,gBAAkBM,EAAO,gBAEnDN,EAAoB,MAAM,gBAAkBM,EAAO,cAGtD,CAAC",
  "names": ["colors", "softwareCheckbox", "softwarePill", "softwareButtonHover", "softwarePillLabel", "isLightThemed", "softwareThemeObserver", "mutationList", "_observer", "colors"]
}
