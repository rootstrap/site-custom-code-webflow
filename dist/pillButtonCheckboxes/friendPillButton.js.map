{
  "version": 3,
  "sources": ["../../src/formInputs/socialCheckboxGroup.ts", "../../src/pillButtonCheckboxes/colors.ts", "../../src/pillButtonCheckboxes/friendPillButton.ts"],
  "sourcesContent": ["export const socialsCheckboxGroup: HTMLElement = document.querySelector('.cc-socials-checkbox-group')\nexport let isSocialsCheckboxErrorDisplayed: boolean = false;\nexport const checkboxes: HTMLInputElement[] = [\n    document.querySelector('#pill-checkbox-google'),\n    document.querySelector('#pill-checkbox-social'),\n    document.querySelector('#pill-checkbox-friend'),\n    document.querySelector('#pill-checkbox-referal'),\n    document.querySelector('#pill-checkbox-other-social'),\n]\nconst socialsRequiredErrorMessage: HTMLElement = document.querySelector('.cc-socials-required-error')\n\nconst socialsRequiredErrorStyles: CSSStyleDeclaration = getComputedStyle(socialsRequiredErrorMessage)\nconst socialsCheckboxGroupsStyles: CSSStyleDeclaration = getComputedStyle(socialsCheckboxGroup)\nconst socialsCheckboxGroupMarginTop: string = socialsCheckboxGroupsStyles.marginTop.substring(0, socialsCheckboxGroupsStyles.marginTop.length - 2)\nconst socialsRequiredErrorLineHeight: string = socialsRequiredErrorStyles.lineHeight.substring(0, socialsRequiredErrorStyles.lineHeight.length - 2)\n\n\nexport const displaySocialCheckboxError = () => {\n    if (!isSocialsCheckboxErrorDisplayed) {\n        socialsCheckboxGroup.style.marginTop = `${Number(socialsCheckboxGroupMarginTop) - Number(socialsRequiredErrorLineHeight)}px`\n        socialsRequiredErrorMessage.style.display = 'block'\n        for (let i = 0; i < checkboxes.length; i++) {\n            checkboxes[i].style.border = '1px solid #cb0b0b'\n        }\n        isSocialsCheckboxErrorDisplayed = true\n    }\n}\n\nexport const hideSocialsCheckboxError = () => {\n    socialsRequiredErrorMessage.style.display = 'none'\n    for (let i = 0; i < checkboxes.length; i++) {\n        checkboxes[i].style.border = '1px solid #9e9e9e'\n    }\n    socialsCheckboxGroup.style.marginTop = `${socialsCheckboxGroupMarginTop}px`\n    isSocialsCheckboxErrorDisplayed = false\n}", "export const colors = {\n\tlightHoverColor: \"#ffc83f\",\n\tdarkHoverColor: \"#ffc83f\",\n\tlightSelectedHoverColor: \"#FFC83F\",\n\tdarkSelectedHoverColor: \"#FFC83F\",\n\tlightBackgroundColor: 'transparent',\n\tdarkBackgroundColor: 'transparent',\n\tlightSelectedBackgroundColor: '#1b1b1b',\n\tdarkSelectedBackgroundColor: \"#FFB90A\",\n\tlightTextColor: \"#1b1b1b\",\n\tlightSelectedTextColor: \"#FFFFFF\",\n\tdarkTextColor: \"#FFFFFF\",\n\tdarkSelectedTextColor: \"#0A0A0A\",\n}", "import { hideSocialsCheckboxError } from \"../formInputs/socialCheckboxGroup\"\nimport { colors } from \"./colors\"\n\nconst friendCheckbox: HTMLInputElement = document.getElementById('checkbox-pill-friend') as HTMLInputElement\nconst friendPill: HTMLElement = document.getElementById('pill-checkbox-friend')\nconst friendButtonHover: HTMLElement = document.getElementById('button-hover-friend')\nconst friendPillLabel: HTMLElement = document.getElementById('pill-list-label-friend')\n\nfunction isLightThemed() {\n\treturn friendPill.className.includes('__light')\n}\n\nconst friendThemeObserver = new MutationObserver((mutationList: unknown, _observer) => {\n\tif (mutationList[0].target.className.includes('__light')) {\n\t\tif (friendCheckbox.checked) {\n\t\t\tfriendPill.style.backgroundColor = colors.lightSelectedBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t\tfriendPillLabel.style.color = colors.lightSelectedTextColor\n\t\t} else {\n\t\t\tfriendPillLabel.style.color = colors.lightTextColor\n\t\t\tfriendPill.style.backgroundColor = colors.lightBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t}\n\t} else {\n\t\tif (friendCheckbox.checked) {\n\t\t\tfriendPill.style.backgroundColor = colors.darkSelectedBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t\tfriendPillLabel.style.color = colors.darkSelectedTextColor\n\t\t} else {\n\t\t\tfriendPill.style.backgroundColor = colors.darkBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t\tfriendPillLabel.style.color = colors.darkTextColor\n\t\t}\n\t}\n})\n\nfriendThemeObserver.observe(friendPill, { attributes: true })\n\nfriendCheckbox.addEventListener('change', function () {\n\thideSocialsCheckboxError()\n\tif (this.checked) {\n\t\tif (isLightThemed()) {\n\t\t\tfriendPill.style.backgroundColor = colors.lightSelectedBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t\tfriendPillLabel.style.color = colors.lightSelectedTextColor\n\t\t} else {\n\t\t\tfriendPillLabel.style.color = colors.darkSelectedTextColor\n\t\t\tfriendPill.style.backgroundColor = colors.darkSelectedBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t}\n\t} else {\n\t\tif (isLightThemed()) {\n\t\t\tfriendPill.style.backgroundColor = colors.lightBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t\tfriendPillLabel.style.color = colors.lightTextColor\n\t\t} else {\n\t\t\tfriendPill.style.backgroundColor = colors.darkBackgroundColor\n\t\t\tfriendButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t\tfriendPillLabel.style.color = colors.darkTextColor\n\t\t}\n\t}\n});\n\nfriendPill.addEventListener('mouseover', function () {\n\tif (friendCheckbox.checked) {\n\t\tif (isLightThemed()) {\n\t\t\tfriendButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t} else {\n\t\t\tfriendButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t}\n\t} else {\n\t\tif (isLightThemed()) {\n\t\t\tfriendButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t} else {\n\t\t\tfriendButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t}\n\t}\n})"],
  "mappings": "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",
  "names": ["socialsCheckboxGroup", "isSocialsCheckboxErrorDisplayed", "checkboxes", "socialsRequiredErrorMessage", "socialsRequiredErrorStyles", "socialsCheckboxGroupsStyles", "socialsCheckboxGroupMarginTop", "socialsRequiredErrorLineHeight", "hideSocialsCheckboxError", "socialsRequiredErrorMessage", "i", "checkboxes", "socialsCheckboxGroup", "socialsCheckboxGroupMarginTop", "isSocialsCheckboxErrorDisplayed", "colors", "friendCheckbox", "friendPill", "friendButtonHover", "friendPillLabel", "isLightThemed", "friendThemeObserver", "mutationList", "_observer", "colors", "hideSocialsCheckboxError"]
}
