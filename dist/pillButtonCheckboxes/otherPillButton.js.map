{
  "version": 3,
  "sources": ["../../src/pillButtonCheckboxes/colors.ts", "../../src/pillButtonCheckboxes/otherPillButton.ts"],
  "sourcesContent": ["export const colors = {\n\tlightHoverColor: \"#ffc83f\",\n\tdarkHoverColor: \"#ffc83f\",\n\tlightSelectedHoverColor: \"#FFC83F\",\n\tdarkSelectedHoverColor: \"#FFC83F\",\n\tlightBackgroundColor: 'transparent',\n\tdarkBackgroundColor: 'transparent',\n\tlightSelectedBackgroundColor: '#1b1b1b',\n\tdarkSelectedBackgroundColor: \"#FFB90A\",\n\tlightTextColor: \"#1b1b1b\",\n\tlightSelectedTextColor: \"#FFFFFF\",\n\tdarkTextColor: \"#FFFFFF\",\n\tdarkSelectedTextColor: \"#0A0A0A\",\n}", "import { colors } from \"./colors\"\n\nconst otherCheckbox: HTMLInputElement = document.getElementById('checkbox-pill-other') as HTMLInputElement\nconst otherPill: HTMLElement = document.getElementById('pill-checkbox-other')\nconst otherButtonHover: HTMLElement = document.getElementById('button-hover-other')\nconst otherPillLabel: HTMLElement = document.getElementById('pill-list-label-other')\n\nfunction isLightThemed() {\n\treturn otherPill.className.includes('__light')\n}\n\nconst otherThemeObserver = new MutationObserver((mutationList: unknown, observer) => {\n\tif (mutationList[0].target.className.includes('__light')) {\n\t\tif (otherCheckbox.checked) {\n\t\t\totherPill.style.backgroundColor = colors.lightSelectedBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t\totherPillLabel.style.color = colors.lightSelectedTextColor\n\t\t} else {\n\t\t\totherPillLabel.style.color = colors.lightTextColor\n\t\t\totherPill.style.backgroundColor = colors.lightBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t}\n\t} else {\n\t\tif (otherCheckbox.checked) {\n\t\t\totherPill.style.backgroundColor = colors.darkSelectedBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t\totherPillLabel.style.color = colors.darkSelectedTextColor\n\t\t} else {\n\t\t\totherPill.style.backgroundColor = colors.darkBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t\totherPillLabel.style.color = colors.darkTextColor\n\t\t}\n\t}\n})\n\notherThemeObserver.observe(otherPill, { attributes: true })\n\notherPill.addEventListener('click', function () {\n\totherCheckbox.checked = !otherCheckbox.checked\n\tif (otherCheckbox.checked) {\n\t\tif (isLightThemed()) {\n\t\t\totherPill.style.backgroundColor = colors.lightSelectedBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t\totherPillLabel.style.color = colors.lightSelectedTextColor\n\t\t} else {\n\t\t\totherPillLabel.style.color = colors.darkSelectedTextColor\n\t\t\totherPill.style.backgroundColor = colors.darkSelectedBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t}\n\t} else {\n\t\tif (isLightThemed()) {\n\t\t\totherPill.style.backgroundColor = colors.lightBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t\totherPillLabel.style.color = colors.lightTextColor\n\t\t} else {\n\t\t\totherPill.style.backgroundColor = colors.darkBackgroundColor\n\t\t\totherButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t\totherPillLabel.style.color = colors.darkTextColor\n\t\t}\n\t}\n});\n\notherPill.addEventListener('mouseover', function () {\n\tif (otherCheckbox.checked) {\n\t\tif (isLightThemed()) {\n\t\t\totherButtonHover.style.backgroundColor = colors.lightSelectedHoverColor\n\t\t} else {\n\t\t\totherButtonHover.style.backgroundColor = colors.darkSelectedHoverColor\n\t\t}\n\t} else {\n\t\tif (isLightThemed()) {\n\t\t\totherButtonHover.style.backgroundColor = colors.lightHoverColor\n\t\t} else {\n\t\t\totherButtonHover.style.backgroundColor = colors.darkHoverColor\n\t\t}\n\t}\n})"],
  "mappings": "MAAO,IAAMA,EAAS,CACrB,gBAAiB,UACjB,eAAgB,UAChB,wBAAyB,UACzB,uBAAwB,UACxB,qBAAsB,cACtB,oBAAqB,cACrB,6BAA8B,UAC9B,4BAA6B,UAC7B,eAAgB,UAChB,uBAAwB,UACxB,cAAe,UACf,sBAAuB,SACxB,ECXA,IAAMC,EAAkC,SAAS,eAAe,qBAAqB,EAC/EC,EAAyB,SAAS,eAAe,qBAAqB,EACtEC,EAAgC,SAAS,eAAe,oBAAoB,EAC5EC,EAA8B,SAAS,eAAe,uBAAuB,EAEnF,SAASC,GAAgB,CACxB,OAAOH,EAAU,UAAU,SAAS,SAAS,CAC9C,CAEA,IAAMI,EAAqB,IAAI,iBAAiB,CAACC,EAAuBC,IAAa,CAChFD,EAAa,CAAC,EAAE,OAAO,UAAU,SAAS,SAAS,EAClDN,EAAc,SACjBC,EAAU,MAAM,gBAAkBO,EAAO,6BACzCN,EAAiB,MAAM,gBAAkBM,EAAO,wBAChDL,EAAe,MAAM,MAAQK,EAAO,yBAEpCL,EAAe,MAAM,MAAQK,EAAO,eACpCP,EAAU,MAAM,gBAAkBO,EAAO,qBACzCN,EAAiB,MAAM,gBAAkBM,EAAO,iBAG7CR,EAAc,SACjBC,EAAU,MAAM,gBAAkBO,EAAO,4BACzCN,EAAiB,MAAM,gBAAkBM,EAAO,uBAChDL,EAAe,MAAM,MAAQK,EAAO,wBAEpCP,EAAU,MAAM,gBAAkBO,EAAO,oBACzCN,EAAiB,MAAM,gBAAkBM,EAAO,eAChDL,EAAe,MAAM,MAAQK,EAAO,cAGvC,CAAC,EAEDH,EAAmB,QAAQJ,EAAW,CAAE,WAAY,EAAK,CAAC,EAE1DA,EAAU,iBAAiB,QAAS,UAAY,CAC/CD,EAAc,QAAU,CAACA,EAAc,QACnCA,EAAc,QACbI,EAAc,GACjBH,EAAU,MAAM,gBAAkBO,EAAO,6BACzCN,EAAiB,MAAM,gBAAkBM,EAAO,wBAChDL,EAAe,MAAM,MAAQK,EAAO,yBAEpCL,EAAe,MAAM,MAAQK,EAAO,sBACpCP,EAAU,MAAM,gBAAkBO,EAAO,4BACzCN,EAAiB,MAAM,gBAAkBM,EAAO,wBAG7CJ,EAAc,GACjBH,EAAU,MAAM,gBAAkBO,EAAO,qBACzCN,EAAiB,MAAM,gBAAkBM,EAAO,gBAChDL,EAAe,MAAM,MAAQK,EAAO,iBAEpCP,EAAU,MAAM,gBAAkBO,EAAO,oBACzCN,EAAiB,MAAM,gBAAkBM,EAAO,eAChDL,EAAe,MAAM,MAAQK,EAAO,cAGvC,CAAC,EAEDP,EAAU,iBAAiB,YAAa,UAAY,CAC/CD,EAAc,QACbI,EAAc,EACjBF,EAAiB,MAAM,gBAAkBM,EAAO,wBAEhDN,EAAiB,MAAM,gBAAkBM,EAAO,uBAG7CJ,EAAc,EACjBF,EAAiB,MAAM,gBAAkBM,EAAO,gBAEhDN,EAAiB,MAAM,gBAAkBM,EAAO,cAGnD,CAAC",
  "names": ["colors", "otherCheckbox", "otherPill", "otherButtonHover", "otherPillLabel", "isLightThemed", "otherThemeObserver", "mutationList", "observer", "colors"]
}
