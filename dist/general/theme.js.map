{
  "version": 3,
  "sources": ["../../src/utils/cookies.ts", "../../src/general/theme.ts"],
  "sourcesContent": ["export function removeCookie(name: string) {\n  document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n}\n\nexport function addCookie(name: string, value = \"\") {\n  document.cookie = `${name}=${value}; path=/;`;\n}", "import { addCookie, removeCookie } from \"../utils/cookies\";\n\nenum Theme {\n  LIGHT = \"__light\",\n  DARK = \"__dark\",\n}\n\nfunction applyTheme(themeId: Theme) {\n  console.log(`applying ${themeId} theme`);\n  const oppositeThemeId = themeId === Theme.LIGHT ? Theme.DARK : Theme.LIGHT;\n  const themedElementsQuery = `*[class*='${oppositeThemeId}']`;\n  const themedElements = [...document.querySelectorAll(themedElementsQuery)];\n  themedElements.forEach(element => {\n    element.className = element.className.replace(oppositeThemeId, themeId);\n  });\n}\n\nfunction setThemeFromCookie() {\n  const isDarkMode = isDarkThemeSelected();\n  applyTheme(isDarkMode ? Theme.DARK : Theme.LIGHT);\n}\n\nfunction setThemeSwitchState() {\n  const themeCheckbox = document.getElementById('toggleTheme') as HTMLInputElement;\n  themeCheckbox.checked = isDarkThemeSelected();\n}\n\nfunction isDarkThemeSelected() {\n  return document.cookie.match(/theme=__dark/i) != null;\n}\n\nfunction toggleTheme() {\n  const isDarkMode = isDarkThemeSelected();\n  applyTheme(isDarkMode ? Theme.LIGHT : Theme.DARK);\n  removeCookie('theme');\n  addCookie('theme', isDarkMode ? Theme.LIGHT : Theme.DARK);\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  setThemeFromCookie();\n  setThemeSwitchState();\n  const themeCheckbox = document.getElementById('toggleTheme') as HTMLInputElement;\n  themeCheckbox.onchange=toggleTheme;\n\n});\n\n// set transition properties AFTER page has loaded\nwindow.onload = function() {\n  const themeRootElement = document.getElementById(\"theme-root\") as HTMLElement;\n  themeRootElement.style.transitionProperty  = \"color, background-color\";\n  themeRootElement.style.transitionDuration = \"300ms\";\n  themeRootElement.style.transitionTimingFunction = \"ease\";\n};\n\n// setup intersection observer to update styles when theme switcher overlaps with color sections\nconst themeSwitcherElement = document.getElementById(\"themeSwitcher\") as HTMLElement;\n// keeps track of sections that have been intersected (LIFO).\nconst overlappingsStack: Array<string> = [];\nconst contrastType = {\n  COLOR: \"COLOR\",\n  HIGH_CONTRAST: \"HIGH_CONTRAST\",\n  LOW_CONTRAST: \"LOW_CONTRAST\",\n};\n\nconst updateThemeSwitcherColor = (currentContrastType) => {\n  switch (currentContrastType) {\n    case contrastType.COLOR:\n      themeSwitcherElement.classList.add(\"cc-color-contrast\");\n      themeSwitcherElement.classList.remove(\"cc-high-contrast\");\n      themeSwitcherElement.classList.remove(\"cc-low-contrast\");\n      return;\n    case contrastType.HIGH_CONTRAST:\n      themeSwitcherElement.classList.remove(\"cc-color-contrast\");\n      themeSwitcherElement.classList.add(\"cc-high-contrast\");\n      themeSwitcherElement.classList.remove(\"cc-low-contrast\");\n      return;\n    case contrastType.LOW_CONTRAST:\n      themeSwitcherElement.classList.remove(\"cc-color-contrast\");\n      themeSwitcherElement.classList.remove(\"cc-high-contrast\");\n      themeSwitcherElement.classList.add(\"cc-low-contrast\");\n      return;\n    default:\n      themeSwitcherElement.classList.remove(\"cc-color-contrast\");\n      themeSwitcherElement.classList.remove(\"cc-high-contrast\");\n      themeSwitcherElement.classList.remove(\"cc-low-contrast\");\n      return;\n  }\n};\n\nconst onSectionIntersect = (entries) => {\n  const overlappingsMap = entries.map(({ isIntersecting, target }) => {\n    return {\n      isIntersecting,\n      sectionType: target.className.includes(\"cc-color-contrast\")\n        ? contrastType.COLOR\n        : target.className.includes(\"cc-high-contrast\")\n          ? contrastType.HIGH_CONTRAST\n          : target.className.includes(\"cc-low-contrast\")\n            ? contrastType.LOW_CONTRAST\n            : null,\n    };\n  });\n\n  // capture entering sections\n  const intersectingEntries: Array<string> = overlappingsMap\n    .filter(({ isIntersecting }) => isIntersecting)\n    .map(({ sectionType }) => sectionType)\n    .reverse();\n\n  // capture exiting sections\n  const nonIntersectingEntries = overlappingsMap\n    .filter(({ isIntersecting }) => !isIntersecting)\n    .map(({ sectionType }) => sectionType);\n\n  // cleanup exiting sections from state\n  nonIntersectingEntries.forEach((_sectionType) => {\n    overlappingsStack.shift();\n  });\n\n  // add entering sections to state\n  overlappingsStack.unshift(...intersectingEntries);\n\n  console.table(overlappingsStack);\n  updateThemeSwitcherColor(overlappingsStack[0]);\n};\n\nconst observer = new IntersectionObserver(onSectionIntersect, {\n  root: null,\n  threshold: 0,\n  rootMargin: `${window.innerHeight}px 0px -40px 0px`,\n});\n\nconst sectionElementsQuery = [\n  \"*[class*='cc-color-contrast']\",\n  \"*[class*='cc-high-contrast']\",\n  \"*[class*='cc-low-contrast']\",\n].join(\", \");\n\nconst sectionElements = [\n  ...document.querySelectorAll(sectionElementsQuery),\n];\n\nsectionElements.forEach((section) => {\n  observer.observe(section);\n});\n"],
  "mappings": "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",
  "names": ["removeCookie", "name", "addCookie", "value", "applyTheme", "themeId", "oppositeThemeId", "themedElementsQuery", "element", "setThemeFromCookie", "isDarkMode", "isDarkThemeSelected", "setThemeSwitchState", "themeCheckbox", "toggleTheme", "removeCookie", "addCookie", "themeRootElement", "themeSwitcherElement", "overlappingsStack", "contrastType", "updateThemeSwitcherColor", "currentContrastType", "onSectionIntersect", "entries", "overlappingsMap", "isIntersecting", "target", "intersectingEntries", "sectionType", "_sectionType", "observer", "sectionElementsQuery", "sectionElements", "section"]
}
